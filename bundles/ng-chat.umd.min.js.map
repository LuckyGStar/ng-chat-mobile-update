{"version":3,"sources":["ng://ng-chat/ng-chat/core/chat-adapter.ts","ng://ng-chat/ng-chat/core/message-type.enum.ts","ng://ng-chat/ng-chat/core/message.ts","ng://ng-chat/ng-chat/core/chat-participant-status.enum.ts","ng://ng-chat/ng-chat/core/chat-participant-type.enum.ts","ng://ng-chat/ng-chat/core/user.ts","ng://ng-chat/ng-chat/core/participant-response.ts","ng://ng-chat/ng-chat/core/participant-metadata.ts","ng://ng-chat/ng-chat/core/window.ts","node_modules/tslib/tslib.es6.js","ng://ng-chat/ng-chat/core/paged-history-chat-adapter.ts","ng://ng-chat/ng-chat/core/theme.enum.ts","ng://ng-chat/ng-chat/core/guid.ts","ng://ng-chat/ng-chat/core/group.ts","ng://ng-chat/ng-chat/core/scroll-direction.enum.ts","ng://ng-chat/ng-chat/core/default-file-upload-adapter.ts","ng://ng-chat/ng-chat/ng-chat.component.ts","ng://ng-chat/ng-chat/pipes/emojify.pipe.ts","ng://ng-chat/ng-chat/pipes/linkfy.pipe.ts","ng://ng-chat/ng-chat/pipes/group-message-display-name.pipe.ts","ng://ng-chat/ng-chat/components/ng-chat-options/ng-chat-options.component.ts","ng://ng-chat/ng-chat/ng-chat.module.ts"],"names":["ChatAdapter","prototype","onFriendsListChanged","participantsResponse","this","friendsListChangedHandler","onMessageReceived","participant","message","messageReceivedHandler","Text","File","Message","type","MessageType","Online","Busy","Away","Offline","User","Group","participantType","ChatParticipantType","ParticipantResponse","ParticipantMetadata","totalUnreadMessages","Window","isLoadingHistory","isCollapsed","messages","newMessage","hasFocus","hasMoreMessages","historyPage","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__generator","thisArg","body","f","y","t","g","_","label","sent","trys","ops","next","verb","throw","return","Symbol","iterator","n","v","step","op","TypeError","call","done","value","pop","length","push","e","__extends","__","constructor","create","tslib_1.__extends","PagedHistoryChatAdapter","Custom","Light","Dark","Guid","newGuid","replace","c","r","Math","random","toString","participants","id","chattingTo","status","ChatParticipantStatus","displayName","map","sort","first","second","join","Top","Bottom","DefaultFileUploadAdapter","uploadFile","file","participantId","formData","FormData","append","name","_http","post","_serverEndpointUrl","NgChat","defaultWindowOptions","currentWindow","_this","groupAdapter","isActive","action","chattingWindow","selectedUsersFromFriendsList","concat","validateContext","displayLabel","defineProperty","userId","searchInput","filter","x","toUpperCase","includes","ngOnInit","bootstrapChat","onResize","event","viewPortTotalArea","target","innerWidth","NormalizeWindows","maxSupportedOpenedWindows","floor","hideFriendsList","friendsListWidth","windowSizeFactor","difference","windows","splice","updateWindowsState","unsupportedViewport","isViewportOnMobileEnabled","hideFriendsListOnUnsupportedViewport","initializationException","adapter","window","initializeTheme","initializeDefaultText","initializeBrowserNotifications","msg","pollFriendsList","fetchFriendsList","setInterval","pollingInterval","bufferAudioFile","hasPagedHistory","fileUploadUrl","fileUploadAdapter","_httpClient","isBootstrapped","ex","console","error","__awaiter","_arguments","P","generator","Promise","resolve","reject","fulfilled","rejected","result","then","apply","browserNotificationsEnabled","Notification","requestPermission","_a","browserNotificationsBootstrapped","localization","messagePlaceholder","searchPlaceholder","title","statusDescription","browserNotificationTitle","loadMessageHistoryPlaceholder","customTheme","theme","Theme","Error","isBootstrapping","listFriends","pipe","response","subscribe","restoreWindowsState","fetchMessageHistory","getMessageHistoryByPage","historyPageSize","forEach","assertMessageType","direction","ScrollDirection","setTimeout","onFetchMessageHistoryLoaded","getMessageHistory","forceMarkMessagesAsSeen","scrollChatWindow","unseenMessages","m","dateSeen","markMessagesAsRead","onMessagesSeen","emit","participantsInteractedWith","chatWindow","openChatWindow","historyEnabled","emitMessageSound","maximizeWindowOnNewMessage","emitBrowserNotification","focusOnNewWindow","invokedByUserClick","openedWindow","find","onParticipantClicked","collapseWindow","newChatWindow","unshift","focusOnWindow","onParticipantChatOpened","callback","windowIndex","indexOf","chatWindowInputs","toArray","nativeElement","focus","windowIndex_1","chatMessageClusters","element","position","scrollHeight","scrollTop","currentDate","Date","audioSource","audioFile","Audio","src","load","audioEnabled","play","notification_1","icon","browserNotificationIconSource","close","persistWindowsState","participantIds","w","localStorage","setItem","localStorageKey","JSON","stringify","stringfiedParticipantIds","getItem","participantIds_1","parse","u","getClosestWindow","index","formatUnreadMessagesTotal","String","unreadMessagesTotal","fromId","unreadMessagesTotalByParticipant","metadata","participantResponse","onChatInputTyped","keyCode","trim","toId","dateSent","sendMessage","preventDefault","currentWindowIndex","messageInputToFocus","shiftKey","closestWindow","onCloseChatWindow","onParticipantChatClosed","onChatTitleClicked","onChatWindowClicked","isAvatarVisible","getChatWindowAvatar","avatar","group","userIndex","findIndex","toggleWindowFocus","unreadMessages","getStatusTitle","currentStatus","toLowerCase","triggerOpenChatWindow","user","triggerCloseChatWindow","triggerToggleChatWindowVisibility","getUniqueFileUploadInstanceId","triggerNativeFileUpload","fileUploadInstanceId_1","uploadElementRef","nativeFileInputs","click","clearInUseFileUploader","fileUploadInstanceId","uploaderInstanceIdIndex","fileUploadersInUse","isUploadingFile","onFileChosen","files","fileMessage","onFriendsListCheckboxChange","selectedUser","isChecked","onFriendsListActionCancelClicked","currentActiveOption","onFriendsListActionConfirmClicked","newGroup","groupCreated","isUserSelectedFromFriendsList","item","Component","args","selector","template","encapsulation","ViewEncapsulation","None","DomSanitizer","HttpClient","Input","Output","ViewChildren","HostListener","sanitizer","emojisEnabled","linkfyEnabled","searchEnabled","messageDatePipeFormat","showMessageDate","EventEmitter","online","busy","away","offline","emojiDictionary","patterns","unicode","EmojifyPipe","transform","pipeEnabled","emoji","pattern","Pipe","LinkfyPipe","replacePatternProtocol","replacePatternWWW","replacePatternMailTo","GroupMessageDisplayNamePipe","NgChatOptionsComponent","onOptionClicked","option","activeOptionTrackerChange","NgChatModule","NgModule","imports","CommonModule","FormsModule","HttpClientModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Observable } from 'rxjs';\nimport { Message } from \"./message\";\nimport { User } from \"./user\";\nimport { ParticipantResponse } from \"./participant-response\";\nimport { IChatParticipant } from './chat-participant';\n\nexport abstract class ChatAdapter\n{\n    // ### Abstract adapter methods ###\n\n    public abstract listFriends(): Observable<ParticipantResponse[]>;\n    \n    public abstract getMessageHistory(destinataryId: any): Observable<Message[]>;\n\n    public abstract sendMessage(message: Message): void;\n\n    // ### Adapter/Chat income/ingress events ###\n\n    public onFriendsListChanged(participantsResponse: ParticipantResponse[]): void\n    {\n        this.friendsListChangedHandler(participantsResponse);\n    }\n\n    public onMessageReceived(participant: IChatParticipant, message: Message): void\n    {\n        this.messageReceivedHandler(participant, message);\n    }\n    \n    // Event handlers\n    friendsListChangedHandler: (participantsResponse: ParticipantResponse[]) => void  = (participantsResponse: ParticipantResponse[]) => {};\n    messageReceivedHandler: (participant: IChatParticipant, message: Message) => void = (participant: IChatParticipant, message: Message) => {};\n}\n","export enum MessageType\n{\n    Text = 1,\n    File = 2\n}\n","import { MessageType } from './message-type.enum';\n\nexport class Message\n{\n    public type?: MessageType = MessageType.Text;\n    public fromId: any;\n    public toId: any;\n    public message: string;\n    public dateSent?: Date;\n    public dateSeen?: Date;\n}\n","export enum ChatParticipantStatus\n{\n    Online,\n    Busy,\n    Away,\n    Offline\n}\n","export enum ChatParticipantType\n{\n    User,\n    Group\n}\n","import { ChatParticipantStatus } from \"./chat-participant-status.enum\";\nimport { IChatParticipant } from \"./chat-participant\";\nimport { ChatParticipantType } from \"./chat-participant-type.enum\";\n\nexport class User implements IChatParticipant\n{\n    public readonly participantType: ChatParticipantType = ChatParticipantType.User;\n    public id: any;\n    public displayName: string;\n    public status: ChatParticipantStatus;\n    public avatar: string;\n}\n","import { User } from \"./user\";\nimport { ParticipantMetadata } from \"./participant-metadata\";\nimport { IChatParticipant } from \"./chat-participant\";\n\nexport class ParticipantResponse\n{\n    public participant: IChatParticipant;\n    public metadata: ParticipantMetadata;\n}\n","export class ParticipantMetadata\n{\n    public totalUnreadMessages: number = 0;\n}\n","import { Message } from \"./message\";\nimport { User } from \"./user\";\nimport { ChatParticipantType } from \"./chat-participant-type.enum\";\nimport { ChatParticipantStatus } from \"./chat-participant-status.enum\";\nimport { Group } from \"./group\";\nimport { IChatParticipant } from \"./chat-participant\";\n\nexport class Window\n{\n    constructor(participant: IChatParticipant, isLoadingHistory: boolean, isCollapsed: boolean)\n    {\n        this.participant = participant;\n        this.messages =  [];\n        this.isLoadingHistory = isLoadingHistory;\n        this.hasFocus = false; // This will be triggered when the 'newMessage' input gets the current focus\n        this.isCollapsed = isCollapsed;\n        this.hasMoreMessages = false;\n        this.historyPage = 0;\n    }\n\n    public participant: IChatParticipant;    \n    public messages: Message[] = [];\n    public newMessage?: string = \"\";\n\n    // UI Behavior properties\n    public isCollapsed?: boolean = false; \n    public isLoadingHistory: boolean = false;\n    public hasFocus: boolean = false;\n    public hasMoreMessages: boolean = true;\n    public historyPage: number = 0;\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Observable } from 'rxjs';\nimport { Message } from \"./message\";\nimport { User } from \"./user\";\nimport { ChatAdapter } from \"./chat-adapter\";\n\n/**\n * @description Chat Adapter decorator class that adds pagination to load the history of messagesr. \n * You will need an existing @see ChatAdapter implementation\n */\nexport abstract class PagedHistoryChatAdapter extends ChatAdapter\n{   \n    abstract getMessageHistoryByPage(destinataryId: any, size: number, page: number) : Observable<Message[]>;\n}\n","export enum Theme\n{\n    Custom = 'custom-theme',\n    Light = 'light-theme',\n    Dark = 'dark-theme'\n}\n","// Poached from: https://github.com/Steve-Fenton/TypeScriptUtilities\n// @dynamic\nexport class Guid {\n    static newGuid() {\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n            var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);\n            return v.toString(16);\n        });\n    }\n}\n","import { Guid } from \"./guid\";\nimport { User } from \"./user\";\nimport { ChatParticipantStatus } from \"./chat-participant-status.enum\";\nimport { IChatParticipant } from \"./chat-participant\";\nimport { ChatParticipantType } from \"./chat-participant-type.enum\";\n\nexport class Group implements IChatParticipant\n{\n    constructor(participants: User[])\n    {   \n        this.chattingTo = participants;\n        this.status = ChatParticipantStatus.Online;\n\n        // TODO: Add some customization for this in future releases\n        this.displayName = participants.map((p) => p.displayName).sort((first, second) => second > first ? -1 : 1).join(\", \");\n    }\n\n    public id: string = Guid.newGuid();\n    public chattingTo: User[];\n\n    public readonly participantType: ChatParticipantType = ChatParticipantType.Group;\n\n    public status: ChatParticipantStatus;\n    public avatar: string | null;\n    public displayName: string;\n}\n","export enum ScrollDirection {\n    Top,\n    Bottom\n}","import { IFileUploadAdapter } from './file-upload-adapter';\nimport { HttpClient, HttpRequest, HttpEventType, HttpResponse, HttpHeaders } from '@angular/common/http';\nimport { Observable, Subject } from 'rxjs';\nimport { User } from './user';\nimport { Message } from './message';\n\nexport class DefaultFileUploadAdapter implements IFileUploadAdapter\n{\n    /**\n     * @summary Basic file upload adapter implementation for HTTP request form file consumption\n     * @param _serverEndpointUrl The API endpoint full qualified address that will receive a form file to process and return the metadata.\n     */\n    constructor(private _serverEndpointUrl: string, private _http: HttpClient) {\n    }\n\n    uploadFile(file: File, participantId: any): Observable<Message> {\n        const formData: FormData = new FormData();\n\n        //formData.append('ng-chat-sender-userid', currentUserId);\n        formData.append('ng-chat-participant-id', participantId);\n        formData.append('file', file, file.name);\n\n        return this._http.post<Message>(this._serverEndpointUrl, formData);\n\n        // TODO: Leaving this if we want to track upload progress in detail in the future. Might need a different Subject generic type wrapper\n        // const fileRequest = new HttpRequest('POST', this._serverEndpointUrl, formData, {\n        //     reportProgress: true\n        // });\n\n        // const uploadProgress = new Subject<number>();\n        // const uploadStatus = uploadProgress.asObservable();\n\n        //const responsePromise = new Subject<Message>();\n\n        // this._http\n        //     .request(fileRequest)\n        //     .subscribe(event => {\n        //         // if (event.type == HttpEventType.UploadProgress)\n        //         // {\n        //         //     const percentDone = Math.round(100 * event.loaded / event.total);\n\n        //         //     uploadProgress.next(percentDone);\n        //         // }\n        //         // else if (event instanceof HttpResponse)\n        //         // {\n                    \n        //         //     uploadProgress.complete();\n        //         // }\n        //     });\n    }\n}\n","import { Component, Input, OnInit, ViewChildren, ViewChild, HostListener, Output, EventEmitter, ElementRef, ViewEncapsulation } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { DomSanitizer } from '@angular/platform-browser';\n\nimport { ChatAdapter } from './core/chat-adapter';\nimport { IChatGroupAdapter } from './core/chat-group-adapter';\nimport { User } from \"./core/user\";\nimport { ParticipantResponse } from \"./core/participant-response\";\nimport { Message } from \"./core/message\";\nimport { FileMessage } from \"./core/file-message\";\nimport { MessageType } from \"./core/message-type.enum\";\nimport { Window } from \"./core/window\";\nimport { ChatParticipantStatus } from \"./core/chat-participant-status.enum\";\nimport { ScrollDirection } from \"./core/scroll-direction.enum\";\nimport { Localization, StatusDescription } from './core/localization';\nimport { IChatController } from './core/chat-controller';\nimport { PagedHistoryChatAdapter } from './core/paged-history-chat-adapter';\nimport { IFileUploadAdapter } from './core/file-upload-adapter';\nimport { DefaultFileUploadAdapter } from './core/default-file-upload-adapter';\nimport { Theme } from './core/theme.enum';\nimport { IChatOption } from './core/chat-option';\nimport { Group } from \"./core/group\";\nimport { ChatParticipantType } from \"./core/chat-participant-type.enum\";\nimport { IChatParticipant } from \"./core/chat-participant\";\n\nimport { map } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\n\n@Component({\n    selector: 'ng-chat',\n    templateUrl: 'ng-chat.component.html',\n    styleUrls: [\n        'assets/icons.css',\n        'assets/loading-spinner.css',\n        'assets/ng-chat.component.default.css',\n        'assets/themes/ng-chat.theme.default.scss',\n        'assets/themes/ng-chat.theme.dark.scss'\n    ],\n    encapsulation: ViewEncapsulation.None\n})\n\nexport class NgChat implements OnInit, IChatController {\n    constructor(public sanitizer: DomSanitizer, private _httpClient: HttpClient) { }\n\n    // Exposes enums for the ng-template\n    public ChatParticipantType = ChatParticipantType;\n    public ChatParticipantStatus = ChatParticipantStatus;\n    public MessageType = MessageType;\n\n    @Input()\n    public adapter: ChatAdapter;\n\n    @Input()\n    public groupAdapter: IChatGroupAdapter;\n\n    @Input()\n    public userId: any;\n\n    @Input()\n    public isCollapsed: boolean = false;\n\n    @Input()\n    public maximizeWindowOnNewMessage: boolean = true;\n\n    @Input()    \n    public pollFriendsList: boolean = false;\n\n    @Input()\n    public pollingInterval: number = 5000;\n\n    @Input()    \n    public historyEnabled: boolean = true;\n\n    @Input()    \n    public emojisEnabled: boolean = true;\n\n    @Input()    \n    public linkfyEnabled: boolean = true;\n\n    @Input()\n    public audioEnabled: boolean = true;\n\n    @Input()\n    public searchEnabled: boolean = true;\n\n    @Input() // TODO: This might need a better content strategy\n    public audioSource: string = 'https://raw.githubusercontent.com/rpaschoal/ng-chat/master/src/ng-chat/assets/notification.wav';\n\n    @Input()\n    public persistWindowsState: boolean = true;\n\n    @Input()\n    public title: string = \"Friends\";\n\n    @Input()\n    public messagePlaceholder: string = \"Type a message\";\n\n    @Input()\n    public searchPlaceholder: string = \"Search\";\n\n    @Input()\n    public browserNotificationsEnabled: boolean = true;\n\n    @Input() // TODO: This might need a better content strategy\n    public browserNotificationIconSource: string = 'https://raw.githubusercontent.com/rpaschoal/ng-chat/master/src/ng-chat/assets/notification.png';\n\n    @Input()\n    public browserNotificationTitle: string = \"New message from\";\n    \n    @Input()\n    public historyPageSize: number = 10;\n\n    @Input()\n    public localization: Localization;\n\n    @Input()\n    public hideFriendsList: boolean = false;\n\n    @Input()\n    public hideFriendsListOnUnsupportedViewport: boolean = true;\n\n    @Input()\n    public fileUploadUrl: string;\n\n    @Input()\n    public theme: Theme = Theme.Light;\n\n    @Input()\n    public customTheme: string;\n\n    @Input()\n    public messageDatePipeFormat: string = \"short\";\n\n    @Input()\n    public showMessageDate: boolean = true;\n    \n    @Input()\n    public isViewportOnMobileEnabled: boolean = false;\n     \n    @Output()\n    public onParticipantClicked: EventEmitter<IChatParticipant> = new EventEmitter<IChatParticipant>();\n\n    @Output()\n    public onParticipantChatOpened: EventEmitter<IChatParticipant> = new EventEmitter<IChatParticipant>();\n\n    @Output()\n    public onParticipantChatClosed: EventEmitter<IChatParticipant> = new EventEmitter<IChatParticipant>();\n    \n    @Output()\n    public onMessagesSeen: EventEmitter<Message[]> = new EventEmitter<Message[]>();\n\n    private browserNotificationsBootstrapped: boolean = false;\n\n    public hasPagedHistory: boolean = false;\n\n    // Don't want to add this as a setting to simplify usage. Previous placeholder and title settings available to be used, or use full Localization object.\n    private statusDescription: StatusDescription = {\n        online: 'Online',\n        busy: 'Busy',\n        away: 'Away',\n        offline: 'Offline'\n    };\n\n    private audioFile: HTMLAudioElement;\n\n    public searchInput: string = '';\n\n    protected participants: IChatParticipant[];\n\n    protected participantsResponse: ParticipantResponse[];\n\n    private participantsInteractedWith: IChatParticipant[] = [];\n\n    public currentActiveOption: IChatOption | null;\n\n    protected selectedUsersFromFriendsList: User[] = [];\n\n    public defaultWindowOptions(currentWindow: Window): IChatOption[]\n    {\n        if (this.groupAdapter && currentWindow.participant.participantType == ChatParticipantType.User)\n        {\n            return [{\n                isActive: false,\n                action: (chattingWindow: Window) => {\n                    \n                    this.selectedUsersFromFriendsList = this.selectedUsersFromFriendsList.concat(chattingWindow.participant as User);\n                },\n                validateContext: (participant: IChatParticipant) => {\n                    return participant.participantType == ChatParticipantType.User;\n                },\n                displayLabel: 'Add People' // TODO: Localize this\n            }];\n        }\n\n        return [];\n    }\n\n    private get localStorageKey(): string \n    {\n        return `ng-chat-users-${this.userId}`; // Appending the user id so the state is unique per user in a computer.   \n    }; \n\n    get filteredParticipants(): IChatParticipant[]\n    {\n        if (this.searchInput.length > 0){\n            // Searches in the friend list by the inputted search string\n            return this.participants.filter(x => x.displayName.toUpperCase().includes(this.searchInput.toUpperCase()));\n        }\n\n        return this.participants;\n    }\n\n    // Defines the size of each opened window to calculate how many windows can be opened on the viewport at the same time.\n    public windowSizeFactor: number = 320;\n\n    // Total width size of the friends list section\n    public friendsListWidth: number = 262;\n\n    // Available area to render the plugin\n    private viewPortTotalArea: number;\n    \n    // Set to true if there is no space to display at least one chat window and 'hideFriendsListOnUnsupportedViewport' is true\n    public unsupportedViewport: boolean = false;\n\n    // File upload state\n    public fileUploadersInUse: string[] = []; // Id bucket of uploaders in use\n    public fileUploadAdapter: IFileUploadAdapter;\n\n    windows: Window[] = [];\n\n    isBootstrapped: boolean = false;\n\n    @ViewChildren('chatMessages') chatMessageClusters: any;\n\n    @ViewChildren('chatWindowInput') chatWindowInputs: any;\n\n    @ViewChildren('nativeFileInput') nativeFileInputs: ElementRef[];\n\n    ngOnInit() { \n        this.bootstrapChat();\n    }\n\n    @HostListener('window:resize', ['$event'])\n    onResize(event: any){\n       this.viewPortTotalArea = event.target.innerWidth;\n\n       this.NormalizeWindows();\n    }\n\n    // Checks if there are more opened windows than the view port can display\n    private NormalizeWindows(): void\n    {\n        let maxSupportedOpenedWindows = Math.floor((this.viewPortTotalArea - (!this.hideFriendsList ? this.friendsListWidth : 0)) / this.windowSizeFactor);\n        let difference = this.windows.length - maxSupportedOpenedWindows;\n\n        if (difference >= 0){\n            this.windows.splice(this.windows.length - difference);\n        }\n\n        this.updateWindowsState(this.windows);\n\n        // Viewport should have space for at least one chat window but should show in mobile if option is enabled.\n        this.unsupportedViewport = this.isViewportOnMobileEnabled? false : this.hideFriendsListOnUnsupportedViewport && maxSupportedOpenedWindows < 1;\n    }\n\n    // Initializes the chat plugin and the messaging adapter\n    private bootstrapChat(): void\n    {\n        let initializationException = null;\n\n        if (this.adapter != null && this.userId != null)\n        {\n            try\n            {\n                this.viewPortTotalArea = window.innerWidth;\n\n                this.initializeTheme();\n                this.initializeDefaultText();\n                this.initializeBrowserNotifications();\n\n                // Binding event listeners\n                this.adapter.messageReceivedHandler = (participant, msg) => this.onMessageReceived(participant, msg);\n                this.adapter.friendsListChangedHandler = (participantsResponse) => this.onFriendsListChanged(participantsResponse);\n\n                // Loading current users list\n                if (this.pollFriendsList){\n                    // Setting a long poll interval to update the friends list\n                    this.fetchFriendsList(true);\n                    setInterval(() => this.fetchFriendsList(false), this.pollingInterval);\n                }\n                else\n                {\n                    // Since polling was disabled, a friends list update mechanism will have to be implemented in the ChatAdapter.\n                    this.fetchFriendsList(true);\n                }\n                \n                this.bufferAudioFile();\n\n                this.hasPagedHistory = this.adapter instanceof PagedHistoryChatAdapter;\n                \n                if (this.fileUploadUrl && this.fileUploadUrl !== \"\")\n                {\n                    this.fileUploadAdapter = new DefaultFileUploadAdapter(this.fileUploadUrl, this._httpClient);\n                }\n\n                this.isBootstrapped = true;\n            }\n            catch(ex)\n            {\n                initializationException = ex;\n            }\n        }\n\n        if (!this.isBootstrapped){\n            console.error(\"ng-chat component couldn't be bootstrapped.\");\n            \n            if (this.userId == null){\n                console.error(\"ng-chat can't be initialized without an user id. Please make sure you've provided an userId as a parameter of the ng-chat component.\");\n            }\n            if (this.adapter == null){\n                console.error(\"ng-chat can't be bootstrapped without a ChatAdapter. Please make sure you've provided a ChatAdapter implementation as a parameter of the ng-chat component.\");\n            }\n            if (initializationException)\n            {\n                console.error(`An exception has occurred while initializing ng-chat. Details: ${initializationException.message}`);\n                console.error(initializationException);\n            }\n        }\n    }\n\n    // Initializes browser notifications\n    private async initializeBrowserNotifications()\n    {\n        if (this.browserNotificationsEnabled && (\"Notification\" in window))\n        {\n            if (await Notification.requestPermission())\n            {\n                this.browserNotificationsBootstrapped = true;\n            }\n        }\n    }\n\n    // Initializes default text\n    private initializeDefaultText() : void\n    {\n        if (!this.localization)\n        {\n            this.localization = {\n                messagePlaceholder: this.messagePlaceholder,\n                searchPlaceholder: this.searchPlaceholder, \n                title: this.title,\n                statusDescription: this.statusDescription,\n                browserNotificationTitle: this.browserNotificationTitle,\n                loadMessageHistoryPlaceholder: \"Load older messages\"\n            };\n        }\n    }\n\n    private initializeTheme(): void\n    {\n        if (this.customTheme)\n        {\n            this.theme = Theme.Custom;\n        }\n        else if (this.theme != Theme.Light && this.theme != Theme.Dark)\n        {\n            // TODO: Use es2017 in future with Object.values(Theme).includes(this.theme) to do this check\n            throw new Error(`Invalid theme configuration for ng-chat. \"${this.theme}\" is not a valid theme value.`);\n        }\n    }\n\n    // Sends a request to load the friends list\n    private fetchFriendsList(isBootstrapping: boolean): void\n    {\n        this.adapter.listFriends()\n        .pipe(\n            map((participantsResponse: ParticipantResponse[]) => {\n                this.participantsResponse = participantsResponse;\n\n                this.participants = participantsResponse.map((response: ParticipantResponse) => {\n                    return response.participant;\n                });\n            })\n        ).subscribe(() => {\n            if (isBootstrapping)\n            {\n                this.restoreWindowsState();\n            }\n        });\n    }\n\n    fetchMessageHistory(window: Window) {\n        // Not ideal but will keep this until we decide if we are shipping pagination with the default adapter\n        if (this.adapter instanceof PagedHistoryChatAdapter)\n        {\n            window.isLoadingHistory = true;\n\n            this.adapter.getMessageHistoryByPage(window.participant.id, this.historyPageSize, ++window.historyPage)\n            .pipe(\n                map((result: Message[]) => {\n                    result.forEach((message) => this.assertMessageType(message));\n                    \n                    window.messages = result.concat(window.messages);\n                    window.isLoadingHistory = false;\n    \n                    const direction: ScrollDirection = (window.historyPage == 1) ? ScrollDirection.Bottom : ScrollDirection.Top;\n                    window.hasMoreMessages = result.length == this.historyPageSize;\n                    \n                    setTimeout(() => this.onFetchMessageHistoryLoaded(result, window, direction, true));\n                })\n            ).subscribe();\n        }\n        else\n        {\n            this.adapter.getMessageHistory(window.participant.id)\n            .pipe(\n                map((result: Message[]) => {\n                    result.forEach((message) => this.assertMessageType(message));\n    \n                    window.messages = result.concat(window.messages);\n                    window.isLoadingHistory = false;\n    \n                    setTimeout(() => this.onFetchMessageHistoryLoaded(result, window, ScrollDirection.Bottom));\n                })\n            ).subscribe();\n        }\n    }\n\n    private onFetchMessageHistoryLoaded(messages: Message[], window: Window, direction: ScrollDirection, forceMarkMessagesAsSeen: boolean = false): void \n    {\n        this.scrollChatWindow(window, direction)\n\n        if (window.hasFocus || forceMarkMessagesAsSeen)\n        {\n            const unseenMessages = messages.filter(m => !m.dateSeen);\n\n            this.markMessagesAsRead(unseenMessages);\n            this.onMessagesSeen.emit(unseenMessages);\n        }\n    }\n\n    // Updates the friends list via the event handler\n    private onFriendsListChanged(participantsResponse: ParticipantResponse[]): void\n    {\n        if (participantsResponse) \n        {\n            this.participantsResponse = participantsResponse;\n\n            this.participants = participantsResponse.map((response: ParticipantResponse) => {\n                return response.participant;\n            });\n\n            this.participantsInteractedWith = [];\n        }\n    }\n\n    // Handles received messages by the adapter\n    private onMessageReceived(participant: IChatParticipant, message: Message)\n    {\n        if (participant && message)\n        {\n            let chatWindow = this.openChatWindow(participant);\n\n            this.assertMessageType(message);\n\n            if (!chatWindow[1] || !this.historyEnabled){\n                chatWindow[0].messages.push(message);\n\n                this.scrollChatWindow(chatWindow[0], ScrollDirection.Bottom);\n\n                if (chatWindow[0].hasFocus)\n                {\n                    this.markMessagesAsRead([message]);\n                    this.onMessagesSeen.emit([message]);\n                }\n            }\n\n            this.emitMessageSound(chatWindow[0]);\n            \n            // Github issue #58 \n            // Do not push browser notifications with message content for privacy purposes if the 'maximizeWindowOnNewMessage' setting is off and this is a new chat window.\n            if (this.maximizeWindowOnNewMessage || (!chatWindow[1] && !chatWindow[0].isCollapsed))\n            { \n                // Some messages are not pushed because they are loaded by fetching the history hence why we supply the message here\n                this.emitBrowserNotification(chatWindow[0], message);\n            }\n        }\n    }\n\n    // Opens a new chat whindow. Takes care of available viewport\n    // Works for opening a chat window for an user or for a group\n    // Returns => [Window: Window object reference, boolean: Indicates if this window is a new chat window]\n    public openChatWindow(participant: IChatParticipant, focusOnNewWindow: boolean = false, invokedByUserClick: boolean = false): [Window, boolean]\n    {\n        // Is this window opened?\n        let openedWindow = this.windows.find(x => x.participant.id == participant.id);\n\n        if (!openedWindow)\n        {\n            if (invokedByUserClick) \n            {\n                this.onParticipantClicked.emit(participant);\n            }\n\n            // Refer to issue #58 on Github \n            let collapseWindow = invokedByUserClick ? false : !this.maximizeWindowOnNewMessage;\n\n            let newChatWindow: Window = new Window(participant, this.historyEnabled, collapseWindow);\n\n            // Loads the chat history via an RxJs Observable\n            if (this.historyEnabled)\n            {\n                this.fetchMessageHistory(newChatWindow);\n            }\n\n            this.windows.unshift(newChatWindow);\n\n            // Is there enough space left in the view port ? but should be displayed in mobile if option is enabled\n            if (!this.isViewportOnMobileEnabled) {\n                if (this.windows.length * this.windowSizeFactor >= this.viewPortTotalArea - (!this.hideFriendsList ? this.friendsListWidth : 0)) {\n                    this.windows.pop();\n                }\n            }\n\n            this.updateWindowsState(this.windows);\n            \n            if (focusOnNewWindow && !collapseWindow) \n            {\n                this.focusOnWindow(newChatWindow);\n            }\n\n            this.participantsInteractedWith.push(participant);\n            this.onParticipantChatOpened.emit(participant);\n\n            return [newChatWindow, true];\n        }\n        else\n        {\n            // Returns the existing chat window     \n            return [openedWindow, false];       \n        }\n    }\n\n    // Focus on the input element of the supplied window\n    private focusOnWindow(window: Window, callback: Function = () => {}) : void\n    {\n        let windowIndex = this.windows.indexOf(window);\n        if (windowIndex >= 0)\n        {\n            setTimeout(() => {\n                if (this.chatWindowInputs)\n                {\n                    let messageInputToFocus = this.chatWindowInputs.toArray()[windowIndex];\n                \n                    messageInputToFocus.nativeElement.focus(); \n                }\n\n                callback(); \n            });\n        } \n    }\n\n    // Scrolls a chat window message flow to the bottom\n    private scrollChatWindow(window: Window, direction: ScrollDirection): void\n    {\n        if (!window.isCollapsed){\n            let windowIndex = this.windows.indexOf(window);\n            setTimeout(() => {\n                if (this.chatMessageClusters){\n                    let targetWindow = this.chatMessageClusters.toArray()[windowIndex];\n\n                    if (targetWindow)\n                    {\n                        let element = this.chatMessageClusters.toArray()[windowIndex].nativeElement;\n                        let position = ( direction === ScrollDirection.Top ) ? 0 : element.scrollHeight;\n                        element.scrollTop = position;\n                    }\n                }\n            }); \n        }\n    }\n\n    // Marks all messages provided as read with the current time.\n    public markMessagesAsRead(messages: Message[]): void\n    {\n        let currentDate = new Date();\n\n        messages.forEach((msg)=>{\n            msg.dateSeen = currentDate;\n        });\n    }\n\n    // Buffers audio file (For component's bootstrapping)\n    private bufferAudioFile(): void {\n        if (this.audioSource && this.audioSource.length > 0)\n        {\n            this.audioFile = new Audio();\n            this.audioFile.src = this.audioSource;\n            this.audioFile.load();\n        }\n    }\n\n    // Emits a message notification audio if enabled after every message received\n    private emitMessageSound(window: Window): void\n    {\n        if (this.audioEnabled && !window.hasFocus && this.audioFile) {\n            this.audioFile.play();\n        }\n    }\n\n    // Emits a browser notification\n    private emitBrowserNotification(window: Window, message: Message): void\n    {       \n        if (this.browserNotificationsBootstrapped && !window.hasFocus && message) {\n            let notification = new Notification(`${this.localization.browserNotificationTitle} ${window.participant.displayName}`, {\n                'body': message.message,\n                'icon': this.browserNotificationIconSource\n            });\n\n            setTimeout(() => {\n                notification.close();\n            }, message.message.length <= 50 ? 5000 : 7000); // More time to read longer messages\n        }\n    }\n\n    // Saves current windows state into local storage if persistence is enabled\n    private updateWindowsState(windows: Window[]): void\n    {\n        if (this.persistWindowsState)\n        {\n            let participantIds = windows.map((w) => {\n                return w.participant.id;\n            });\n\n            localStorage.setItem(this.localStorageKey, JSON.stringify(participantIds));\n        }\n    }\n\n    private restoreWindowsState(): void\n    {\n        try\n        {\n            if (this.persistWindowsState)\n            {\n                let stringfiedParticipantIds = localStorage.getItem(this.localStorageKey);\n\n                if (stringfiedParticipantIds && stringfiedParticipantIds.length > 0)\n                {\n                    let participantIds = <number[]>JSON.parse(stringfiedParticipantIds);\n\n                    let participantsToRestore = this.participants.filter(u => participantIds.indexOf(u.id) >= 0);\n\n                    participantsToRestore.forEach((participant) => {\n                        this.openChatWindow(participant);\n                    });\n                }\n            }\n        }\n        catch (ex)\n        {\n            console.error(`An error occurred while restoring ng-chat windows state. Details: ${ex}`);\n        }\n    }\n\n    // Gets closest open window if any. Most recent opened has priority (Right)\n    private getClosestWindow(window: Window): Window | undefined\n    {   \n        let index = this.windows.indexOf(window);\n\n        if (index > 0)\n        {\n            return this.windows[index - 1];\n        }\n        else if (index == 0 && this.windows.length > 1)\n        {   \n            return this.windows[index + 1];\n        }\n    }\n\n    private assertMessageType(message: Message): void {\n        // Always fallback to \"Text\" messages to avoid rendenring issues\n        if (!message.type)\n        {\n            message.type = MessageType.Text;\n        }\n    }\n\n    private formatUnreadMessagesTotal(totalUnreadMessages: number): string\n    {\n        if (totalUnreadMessages > 0){\n\n            if (totalUnreadMessages > 99) \n                return  \"99+\";\n            else\n                return String(totalUnreadMessages); \n        }\n\n        // Empty fallback.\n        return \"\";\n    }\n\n    // Returns the total unread messages from a chat window. TODO: Could use some Angular pipes in the future \n    unreadMessagesTotal(window: Window): string\n    {\n        let totalUnreadMessages = 0;\n\n        if (window){\n            totalUnreadMessages = window.messages.filter(x => x.fromId != this.userId && !x.dateSeen).length;\n        }\n            \n        return this.formatUnreadMessagesTotal(totalUnreadMessages);\n    }\n\n    unreadMessagesTotalByParticipant(participant: IChatParticipant): string\n    {\n        let openedWindow = this.windows.find(x => x.participant.id == participant.id);\n\n        if (openedWindow){\n            return this.unreadMessagesTotal(openedWindow);\n        }\n        else\n        {\n            let totalUnreadMessages = this.participantsResponse\n                .filter(x => x.participant.id == participant.id && !this.participantsInteractedWith.find(u => u.id == participant.id) && x.metadata && x.metadata.totalUnreadMessages > 0)\n                .map((participantResponse) => {\n                    return participantResponse.metadata.totalUnreadMessages\n                })[0];\n\n            return this.formatUnreadMessagesTotal(totalUnreadMessages);\n        }\n    }\n\n    /*  Monitors pressed keys on a chat window\n        - Dispatches a message when the ENTER key is pressed\n        - Tabs between windows on TAB or SHIFT + TAB\n        - Closes the current focused window on ESC\n    */\n    onChatInputTyped(event: any, window: Window): void\n    {\n        switch (event.keyCode)\n        {\n            case 13:\n                if (window.newMessage && window.newMessage.trim() != \"\")\n                {\n                    let message = new Message();\n             \n                    message.fromId = this.userId;\n                    message.toId = window.participant.id;\n                    message.message = window.newMessage;\n                    message.dateSent = new Date();\n        \n                    window.messages.push(message);\n        \n                    this.adapter.sendMessage(message);\n        \n                    window.newMessage = \"\"; // Resets the new message input\n        \n                    this.scrollChatWindow(window, ScrollDirection.Bottom);\n                }\n                break;\n            case 9:\n                event.preventDefault();\n                \n                let currentWindowIndex = this.windows.indexOf(window);\n                let messageInputToFocus = this.chatWindowInputs.toArray()[currentWindowIndex + (event.shiftKey ? 1 : -1)]; // Goes back on shift + tab\n\n                if (!messageInputToFocus)\n                {\n                    // Edge windows, go to start or end\n                    messageInputToFocus = this.chatWindowInputs.toArray()[currentWindowIndex > 0 ? 0 : this.chatWindowInputs.length - 1]; \n                }\n\n                messageInputToFocus.nativeElement.focus();\n\n                break;\n            case 27:\n                let closestWindow = this.getClosestWindow(window);\n\n                if (closestWindow)\n                {\n                    this.focusOnWindow(closestWindow, () => { this.onCloseChatWindow(window); });\n                }\n                else\n                {\n                    this.onCloseChatWindow(window);\n                }\n        }\n    }\n\n    // Closes a chat window via the close 'X' button\n    onCloseChatWindow(window: Window): void \n    {\n        let index = this.windows.indexOf(window);\n\n        this.windows.splice(index, 1);\n\n        this.updateWindowsState(this.windows);\n\n        this.onParticipantChatClosed.emit(window.participant);\n    }\n\n    // Toggle friends list visibility\n    onChatTitleClicked(event: any): void\n    {\n        this.isCollapsed = !this.isCollapsed;\n    }\n\n    // Toggles a chat window visibility between maximized/minimized\n    onChatWindowClicked(window: Window): void\n    {\n        window.isCollapsed = !window.isCollapsed;\n        this.scrollChatWindow(window, ScrollDirection.Bottom);\n    }\n\n    // Asserts if a user avatar is visible in a chat cluster\n    isAvatarVisible(window: Window, message: Message, index: number): boolean\n    {\n        if (message.fromId != this.userId){\n            if (index == 0){\n                return true; // First message, good to show the thumbnail\n            }\n            else{\n                // Check if the previous message belongs to the same user, if it belongs there is no need to show the avatar again to form the message cluster\n                if (window.messages[index - 1].fromId != message.fromId){\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    getChatWindowAvatar(participant: IChatParticipant, message: Message): string | null\n    {\n        if (participant.participantType == ChatParticipantType.User)\n        {\n            return participant.avatar;\n        }\n        else if (participant.participantType == ChatParticipantType.Group)\n        {\n            let group = participant as Group;\n            let userIndex = group.chattingTo.findIndex(x => x.id == message.fromId);\n\n            return group.chattingTo[userIndex >= 0 ? userIndex : 0].avatar;\n        }\n\n        return null;\n    }\n\n    // Toggles a window focus on the focus/blur of a 'newMessage' input\n    toggleWindowFocus(window: Window): void\n    {\n        window.hasFocus = !window.hasFocus;\n        if(window.hasFocus) {\n            const unreadMessages = window.messages\n                .filter(message => message.dateSeen == null \n                    && (message.toId == this.userId || window.participant.participantType === ChatParticipantType.Group));\n            \n            if (unreadMessages && unreadMessages.length > 0)\n            {\n                this.markMessagesAsRead(unreadMessages);\n                this.onMessagesSeen.emit(unreadMessages);\n            }\n        }\n    }\n\n    // [Localized] Returns the status descriptive title\n    getStatusTitle(status: ChatParticipantStatus) : any\n    {\n        let currentStatus = status.toString().toLowerCase();\n\n        return this.localization.statusDescription[currentStatus];\n    }\n\n    triggerOpenChatWindow(user: User): void {\n        if (user)\n        {\n            this.openChatWindow(user);\n        }\n    }\n\n    triggerCloseChatWindow(userId: any): void {\n        let openedWindow = this.windows.find(x => x.participant.id == userId);\n\n        if (openedWindow){\n            this.onCloseChatWindow(openedWindow);\n        }\n    }\n\n    triggerToggleChatWindowVisibility(userId: any): void {\n        let openedWindow = this.windows.find(x => x.participant.id == userId);\n\n        if (openedWindow){\n            this.onChatWindowClicked(openedWindow);\n        }\n    }\n\n    // Generates a unique file uploader id for each participant\n    getUniqueFileUploadInstanceId(window: Window): string\n    {\n        if (window && window.participant)\n        {\n            return `ng-chat-file-upload-${window.participant.id}`;\n        }\n        \n        return 'ng-chat-file-upload';\n    }\n\n    // Triggers native file upload for file selection from the user\n    triggerNativeFileUpload(window: Window): void\n    {\n        if (window)\n        {\n            const fileUploadInstanceId = this.getUniqueFileUploadInstanceId(window);\n            const uploadElementRef = this.nativeFileInputs.filter(x => x.nativeElement.id === fileUploadInstanceId)[0];\n\n            if (uploadElementRef)\n            uploadElementRef.nativeElement.click();\n        }\n    }\n\n    private clearInUseFileUploader(fileUploadInstanceId: string): void\n    {\n        const uploaderInstanceIdIndex = this.fileUploadersInUse.indexOf(fileUploadInstanceId);\n\n        if (uploaderInstanceIdIndex > -1) {\n            this.fileUploadersInUse.splice(uploaderInstanceIdIndex, 1);\n        }\n    }\n\n    isUploadingFile(window: Window): boolean\n    {\n        const fileUploadInstanceId = this.getUniqueFileUploadInstanceId(window);\n\n        return this.fileUploadersInUse.indexOf(fileUploadInstanceId) > -1;\n    }\n\n    // Handles file selection and uploads the selected file using the file upload adapter\n    onFileChosen(window: Window): void {\n        const fileUploadInstanceId = this.getUniqueFileUploadInstanceId(window);\n        const uploadElementRef = this.nativeFileInputs.filter(x => x.nativeElement.id === fileUploadInstanceId)[0];\n\n        if (uploadElementRef)\n        {\n            const file: File = uploadElementRef.nativeElement.files[0];\n\n            this.fileUploadersInUse.push(fileUploadInstanceId);\n\n            this.fileUploadAdapter.uploadFile(file, window.participant.id)\n                .subscribe(fileMessage => {\n                    this.clearInUseFileUploader(fileUploadInstanceId);\n\n                    fileMessage.fromId = this.userId;\n\n                    // Push file message to current user window   \n                    window.messages.push(fileMessage);\n        \n                    this.adapter.sendMessage(fileMessage);\n        \n                    this.scrollChatWindow(window, ScrollDirection.Bottom);\n\n                    // Resets the file upload element\n                    uploadElementRef.nativeElement.value = '';\n                }, (error) => {\n                    this.clearInUseFileUploader(fileUploadInstanceId);\n\n                    // Resets the file upload element\n                    uploadElementRef.nativeElement.value = '';\n\n                    // TODO: Invoke a file upload adapter error here\n                });\n        }\n    }\n    \n    onFriendsListCheckboxChange(selectedUser: User, isChecked: boolean): void\n    {\n        if(isChecked) {\n            this.selectedUsersFromFriendsList.push(selectedUser);\n        } \n        else \n        {\n            this.selectedUsersFromFriendsList.splice(this.selectedUsersFromFriendsList.indexOf(selectedUser), 1);\n        }\n    }\n\n    onFriendsListActionCancelClicked(): void\n    {\n        if (this.currentActiveOption)\n        {\n            this.currentActiveOption.isActive = false;\n            this.currentActiveOption = null;\n            this.selectedUsersFromFriendsList = [];\n        }\n    }\n\n    onFriendsListActionConfirmClicked() : void\n    {\n        let newGroup = new Group(this.selectedUsersFromFriendsList);\n\n        this.openChatWindow(newGroup);\n\n        if (this.groupAdapter)\n        {\n            this.groupAdapter.groupCreated(newGroup);\n        }\n\n        // Canceling current state\n        this.onFriendsListActionCancelClicked();\n    }\n\n    isUserSelectedFromFriendsList(user: User) : boolean\n    {\n        return (this.selectedUsersFromFriendsList.filter(item => item.id == user.id)).length > 0\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\nlet emojiDictionary = [\n    { patterns: [':)', ':-)', '=)'], unicode: 'ð' },\n    { patterns: [':D', ':-D', '=D'], unicode: 'ð' },\n    { patterns: [':(', ':-(', '=('], unicode: 'ð' },\n    { patterns: [':|', ':-|', '=|'], unicode: 'ð' },\n    { patterns: [':*', ':-*', '=*'], unicode: 'ð' },\n    { patterns: ['T_T', 'T.T'], unicode: 'ð­' },\n    { patterns: [':O', ':-O', '=O', ':o', ':-o', '=o'], unicode: 'ð®' },\n    { patterns: [':P', ':-P', '=P', ':p', ':-p', '=p'], unicode: 'ð' },\n    { patterns: ['>.<'], unicode: 'ð£' },\n    { patterns: ['@.@'], unicode: 'ðµ' },\n    { patterns: ['*.*'], unicode: 'ð' },\n    { patterns: ['<3'], unicode: 'â¤ï¸' },\n    { patterns: ['^.^'], unicode: 'ð' },\n    { patterns: [':+1'], unicode: 'ð' },\n    { patterns: [':-1'], unicode: 'ð' }\n];\n\n/*\n * Transforms common emoji text to UTF encoded emojis\n*/\n@Pipe({name: 'emojify'})\nexport class EmojifyPipe implements PipeTransform {\n    transform(message: string, pipeEnabled: boolean): string {\n        if (pipeEnabled && message && message.length > 1) {  \n            emojiDictionary.forEach(emoji => {\n                emoji.patterns.forEach(pattern => {\n                    message = message.replace(pattern, emoji.unicode);\n                })\n            });\n        }\n\n    return message;\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n/*\n * Transforms text containing URLs or E-mails to valid links/mailtos\n*/\n@Pipe({name: 'linkfy'})\nexport class LinkfyPipe implements PipeTransform {\n    transform(message: string, pipeEnabled: boolean): string {\n        if (pipeEnabled && message && message.length > 1)\n        {\n            let replacedText;\n            let replacePatternProtocol;\n            let replacePatternWWW;\n            let replacePatternMailTo;\n\n            // URLs starting with http://, https://, or ftp://\n            replacePatternProtocol = /(\\b(https?|ftp):\\/\\/[-A-Z0-9+&@#\\/%?=~_|!:,.;]*[-A-Z0-9+&@#\\/%=~_|])/gim;\n            replacedText = message.replace(replacePatternProtocol, '<a href=\"$1\" target=\"_blank\">$1</a>');\n\n            // URLs starting with \"www.\" (ignoring // before it).\n            replacePatternWWW = /(^|[^\\/])(www\\.[\\S]+(\\b|$))/gim;\n            replacedText = replacedText.replace(replacePatternWWW, '$1<a href=\"http://$2\" target=\"_blank\">$2</a>');\n\n            // Change email addresses to mailto:: links.\n            replacePatternMailTo = /(([a-zA-Z0-9\\-\\_\\.])+@[a-zA-Z\\_]+?(\\.[a-zA-Z]{2,6})+)/gim;\n            replacedText = replacedText.replace(replacePatternMailTo, '<a href=\"mailto:$1\">$1</a>');\n\n            return replacedText;\n        }\n        else\n            return message;\n    } \n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { Group } from \"../core/group\";\nimport { ChatParticipantType } from \"../core/chat-participant-type.enum\";\nimport { IChatParticipant } from \"../core/chat-participant\";\nimport { Message } from \"../core/message\";\n\n/*\n * Renders the display name of a participant in a group based on who's sent the message\n*/\n@Pipe({name: 'groupMessageDisplayName'})\nexport class GroupMessageDisplayNamePipe implements PipeTransform {\n    transform(participant: IChatParticipant, message: Message): string {\n        if (participant && participant.participantType == ChatParticipantType.Group)\n        {\n            let group = participant as Group;\n            let userIndex = group.chattingTo.findIndex(x => x.id == message.fromId);\n\n            return group.chattingTo[userIndex >= 0 ? userIndex : 0].displayName;\n        }\n        else\n            return \"\";\n    } \n}\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { Window } from '../../core/window';\nimport { IChatOption } from '../../core/chat-option';\n\n@Component({\n    selector: 'ng-chat-options',\n    templateUrl: './ng-chat-options.component.html',\n    styleUrls: ['./ng-chat-options.component.css']\n})\nexport class NgChatOptionsComponent implements OnInit {\n\n  constructor() { }\n\n  @Input()\n  public options: IChatOption[];\n\n  @Input()\n  public activeOptionTracker: IChatOption;\n\n  @Output()\n  public activeOptionTrackerChange: EventEmitter<IChatOption> = new EventEmitter<IChatOption>();\n\n  @Input()\n  public chattingTo: Window;\n\n  ngOnInit() {\n  }\n\n  onOptionClicked(option: IChatOption): void\n  {\n      if (option.action)\n      {\n          option.isActive = true;\n          option.action(this.chattingTo);\n          this.activeOptionTrackerChange.emit(option);\n      }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { NgChat } from './ng-chat.component';\nimport { EmojifyPipe } from './pipes/emojify.pipe';\nimport { LinkfyPipe } from './pipes/linkfy.pipe';\nimport { GroupMessageDisplayNamePipe } from './pipes/group-message-display-name.pipe';\nimport { NgChatOptionsComponent } from './components/ng-chat-options/ng-chat-options.component';\n\n@NgModule({\n  imports: [CommonModule, FormsModule, HttpClientModule],\n  declarations: [NgChat, EmojifyPipe, LinkfyPipe, GroupMessageDisplayNamePipe, NgChatOptionsComponent],\n  exports: [NgChat]\n})\nexport class NgChatModule {\n}\n"]}