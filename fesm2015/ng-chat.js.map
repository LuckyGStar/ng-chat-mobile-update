{"version":3,"file":"ng-chat.js.map","sources":["ng://ng-chat/ng-chat/core/chat-adapter.ts","ng://ng-chat/ng-chat/core/message-type.enum.ts","ng://ng-chat/ng-chat/core/message.ts","ng://ng-chat/ng-chat/core/chat-participant-status.enum.ts","ng://ng-chat/ng-chat/core/chat-participant-type.enum.ts","ng://ng-chat/ng-chat/core/user.ts","ng://ng-chat/ng-chat/core/participant-response.ts","ng://ng-chat/ng-chat/core/participant-metadata.ts","ng://ng-chat/ng-chat/core/window.ts","ng://ng-chat/ng-chat/core/paged-history-chat-adapter.ts","ng://ng-chat/ng-chat/core/theme.enum.ts","ng://ng-chat/ng-chat/core/guid.ts","ng://ng-chat/ng-chat/core/group.ts","ng://ng-chat/ng-chat/core/scroll-direction.enum.ts","ng://ng-chat/ng-chat/core/default-file-upload-adapter.ts","ng://ng-chat/ng-chat/ng-chat.component.ts","ng://ng-chat/ng-chat/pipes/emojify.pipe.ts","ng://ng-chat/ng-chat/pipes/linkfy.pipe.ts","ng://ng-chat/ng-chat/pipes/group-message-display-name.pipe.ts","ng://ng-chat/ng-chat/components/ng-chat-options/ng-chat-options.component.ts","ng://ng-chat/ng-chat/ng-chat.module.ts"],"sourcesContent":["import { Observable } from 'rxjs';\nimport { Message } from \"./message\";\nimport { User } from \"./user\";\nimport { ParticipantResponse } from \"./participant-response\";\nimport { IChatParticipant } from './chat-participant';\n\nexport abstract class ChatAdapter\n{\n    // ### Abstract adapter methods ###\n\n    public abstract listFriends(): Observable<ParticipantResponse[]>;\n    \n    public abstract getMessageHistory(destinataryId: any): Observable<Message[]>;\n\n    public abstract sendMessage(message: Message): void;\n\n    // ### Adapter/Chat income/ingress events ###\n\n    public onFriendsListChanged(participantsResponse: ParticipantResponse[]): void\n    {\n        this.friendsListChangedHandler(participantsResponse);\n    }\n\n    public onMessageReceived(participant: IChatParticipant, message: Message): void\n    {\n        this.messageReceivedHandler(participant, message);\n    }\n    \n    // Event handlers\n    friendsListChangedHandler: (participantsResponse: ParticipantResponse[]) => void  = (participantsResponse: ParticipantResponse[]) => {};\n    messageReceivedHandler: (participant: IChatParticipant, message: Message) => void = (participant: IChatParticipant, message: Message) => {};\n}\n","export enum MessageType\n{\n    Text = 1,\n    File = 2\n}\n","import { MessageType } from './message-type.enum';\n\nexport class Message\n{\n    public type?: MessageType = MessageType.Text;\n    public fromId: any;\n    public toId: any;\n    public message: string;\n    public dateSent?: Date;\n    public dateSeen?: Date;\n}\n","export enum ChatParticipantStatus\n{\n    Online,\n    Busy,\n    Away,\n    Offline\n}\n","export enum ChatParticipantType\n{\n    User,\n    Group\n}\n","import { ChatParticipantStatus } from \"./chat-participant-status.enum\";\nimport { IChatParticipant } from \"./chat-participant\";\nimport { ChatParticipantType } from \"./chat-participant-type.enum\";\n\nexport class User implements IChatParticipant\n{\n    public readonly participantType: ChatParticipantType = ChatParticipantType.User;\n    public id: any;\n    public displayName: string;\n    public status: ChatParticipantStatus;\n    public avatar: string;\n}\n","import { User } from \"./user\";\nimport { ParticipantMetadata } from \"./participant-metadata\";\nimport { IChatParticipant } from \"./chat-participant\";\n\nexport class ParticipantResponse\n{\n    public participant: IChatParticipant;\n    public metadata: ParticipantMetadata;\n}\n","export class ParticipantMetadata\n{\n    public totalUnreadMessages: number = 0;\n}\n","import { Message } from \"./message\";\nimport { User } from \"./user\";\nimport { ChatParticipantType } from \"./chat-participant-type.enum\";\nimport { ChatParticipantStatus } from \"./chat-participant-status.enum\";\nimport { Group } from \"./group\";\nimport { IChatParticipant } from \"./chat-participant\";\n\nexport class Window\n{\n    constructor(participant: IChatParticipant, isLoadingHistory: boolean, isCollapsed: boolean)\n    {\n        this.participant = participant;\n        this.messages =  [];\n        this.isLoadingHistory = isLoadingHistory;\n        this.hasFocus = false; // This will be triggered when the 'newMessage' input gets the current focus\n        this.isCollapsed = isCollapsed;\n        this.hasMoreMessages = false;\n        this.historyPage = 0;\n    }\n\n    public participant: IChatParticipant;    \n    public messages: Message[] = [];\n    public newMessage?: string = \"\";\n\n    // UI Behavior properties\n    public isCollapsed?: boolean = false; \n    public isLoadingHistory: boolean = false;\n    public hasFocus: boolean = false;\n    public hasMoreMessages: boolean = true;\n    public historyPage: number = 0;\n}\n","import { Observable } from 'rxjs';\nimport { Message } from \"./message\";\nimport { User } from \"./user\";\nimport { ChatAdapter } from \"./chat-adapter\";\n\n/**\n * @description Chat Adapter decorator class that adds pagination to load the history of messagesr. \n * You will need an existing @see ChatAdapter implementation\n */\nexport abstract class PagedHistoryChatAdapter extends ChatAdapter\n{   \n    abstract getMessageHistoryByPage(destinataryId: any, size: number, page: number) : Observable<Message[]>;\n}\n","export enum Theme\n{\n    Custom = 'custom-theme',\n    Light = 'light-theme',\n    Dark = 'dark-theme'\n}\n","// Poached from: https://github.com/Steve-Fenton/TypeScriptUtilities\n// @dynamic\nexport class Guid {\n    static newGuid() {\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n            var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);\n            return v.toString(16);\n        });\n    }\n}\n","import { Guid } from \"./guid\";\nimport { User } from \"./user\";\nimport { ChatParticipantStatus } from \"./chat-participant-status.enum\";\nimport { IChatParticipant } from \"./chat-participant\";\nimport { ChatParticipantType } from \"./chat-participant-type.enum\";\n\nexport class Group implements IChatParticipant\n{\n    constructor(participants: User[])\n    {   \n        this.chattingTo = participants;\n        this.status = ChatParticipantStatus.Online;\n\n        // TODO: Add some customization for this in future releases\n        this.displayName = participants.map((p) => p.displayName).sort((first, second) => second > first ? -1 : 1).join(\", \");\n    }\n\n    public id: string = Guid.newGuid();\n    public chattingTo: User[];\n\n    public readonly participantType: ChatParticipantType = ChatParticipantType.Group;\n\n    public status: ChatParticipantStatus;\n    public avatar: string | null;\n    public displayName: string;\n}\n","export enum ScrollDirection {\n    Top,\n    Bottom\n}","import { IFileUploadAdapter } from './file-upload-adapter';\nimport { HttpClient, HttpRequest, HttpEventType, HttpResponse, HttpHeaders } from '@angular/common/http';\nimport { Observable, Subject } from 'rxjs';\nimport { User } from './user';\nimport { Message } from './message';\n\nexport class DefaultFileUploadAdapter implements IFileUploadAdapter\n{\n    /**\n     * @summary Basic file upload adapter implementation for HTTP request form file consumption\n     * @param _serverEndpointUrl The API endpoint full qualified address that will receive a form file to process and return the metadata.\n     */\n    constructor(private _serverEndpointUrl: string, private _http: HttpClient) {\n    }\n\n    uploadFile(file: File, participantId: any): Observable<Message> {\n        const formData: FormData = new FormData();\n\n        //formData.append('ng-chat-sender-userid', currentUserId);\n        formData.append('ng-chat-participant-id', participantId);\n        formData.append('file', file, file.name);\n\n        return this._http.post<Message>(this._serverEndpointUrl, formData);\n\n        // TODO: Leaving this if we want to track upload progress in detail in the future. Might need a different Subject generic type wrapper\n        // const fileRequest = new HttpRequest('POST', this._serverEndpointUrl, formData, {\n        //     reportProgress: true\n        // });\n\n        // const uploadProgress = new Subject<number>();\n        // const uploadStatus = uploadProgress.asObservable();\n\n        //const responsePromise = new Subject<Message>();\n\n        // this._http\n        //     .request(fileRequest)\n        //     .subscribe(event => {\n        //         // if (event.type == HttpEventType.UploadProgress)\n        //         // {\n        //         //     const percentDone = Math.round(100 * event.loaded / event.total);\n\n        //         //     uploadProgress.next(percentDone);\n        //         // }\n        //         // else if (event instanceof HttpResponse)\n        //         // {\n                    \n        //         //     uploadProgress.complete();\n        //         // }\n        //     });\n    }\n}\n","import { Component, Input, OnInit, ViewChildren, ViewChild, HostListener, Output, EventEmitter, ElementRef, ViewEncapsulation } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { DomSanitizer } from '@angular/platform-browser';\n\nimport { ChatAdapter } from './core/chat-adapter';\nimport { IChatGroupAdapter } from './core/chat-group-adapter';\nimport { User } from \"./core/user\";\nimport { ParticipantResponse } from \"./core/participant-response\";\nimport { Message } from \"./core/message\";\nimport { FileMessage } from \"./core/file-message\";\nimport { MessageType } from \"./core/message-type.enum\";\nimport { Window } from \"./core/window\";\nimport { ChatParticipantStatus } from \"./core/chat-participant-status.enum\";\nimport { ScrollDirection } from \"./core/scroll-direction.enum\";\nimport { Localization, StatusDescription } from './core/localization';\nimport { IChatController } from './core/chat-controller';\nimport { PagedHistoryChatAdapter } from './core/paged-history-chat-adapter';\nimport { IFileUploadAdapter } from './core/file-upload-adapter';\nimport { DefaultFileUploadAdapter } from './core/default-file-upload-adapter';\nimport { Theme } from './core/theme.enum';\nimport { IChatOption } from './core/chat-option';\nimport { Group } from \"./core/group\";\nimport { ChatParticipantType } from \"./core/chat-participant-type.enum\";\nimport { IChatParticipant } from \"./core/chat-participant\";\n\nimport { map } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\n\n@Component({\n    selector: 'ng-chat',\n    templateUrl: 'ng-chat.component.html',\n    styleUrls: [\n        'assets/icons.css',\n        'assets/loading-spinner.css',\n        'assets/ng-chat.component.default.css',\n        'assets/themes/ng-chat.theme.default.scss',\n        'assets/themes/ng-chat.theme.dark.scss'\n    ],\n    encapsulation: ViewEncapsulation.None\n})\n\nexport class NgChat implements OnInit, IChatController {\n    constructor(public sanitizer: DomSanitizer, private _httpClient: HttpClient) { }\n\n    // Exposes enums for the ng-template\n    public ChatParticipantType = ChatParticipantType;\n    public ChatParticipantStatus = ChatParticipantStatus;\n    public MessageType = MessageType;\n\n    @Input()\n    public adapter: ChatAdapter;\n\n    @Input()\n    public groupAdapter: IChatGroupAdapter;\n\n    @Input()\n    public userId: any;\n\n    @Input()\n    public isCollapsed: boolean = false;\n\n    @Input()\n    public maximizeWindowOnNewMessage: boolean = true;\n\n    @Input()    \n    public pollFriendsList: boolean = false;\n\n    @Input()\n    public pollingInterval: number = 5000;\n\n    @Input()    \n    public historyEnabled: boolean = true;\n\n    @Input()    \n    public emojisEnabled: boolean = true;\n\n    @Input()    \n    public linkfyEnabled: boolean = true;\n\n    @Input()\n    public audioEnabled: boolean = true;\n\n    @Input()\n    public searchEnabled: boolean = true;\n\n    @Input() // TODO: This might need a better content strategy\n    public audioSource: string = 'https://raw.githubusercontent.com/rpaschoal/ng-chat/master/src/ng-chat/assets/notification.wav';\n\n    @Input()\n    public persistWindowsState: boolean = true;\n\n    @Input()\n    public title: string = \"Friends\";\n\n    @Input()\n    public messagePlaceholder: string = \"Type a message\";\n\n    @Input()\n    public searchPlaceholder: string = \"Search\";\n\n    @Input()\n    public browserNotificationsEnabled: boolean = true;\n\n    @Input() // TODO: This might need a better content strategy\n    public browserNotificationIconSource: string = 'https://raw.githubusercontent.com/rpaschoal/ng-chat/master/src/ng-chat/assets/notification.png';\n\n    @Input()\n    public browserNotificationTitle: string = \"New message from\";\n    \n    @Input()\n    public historyPageSize: number = 10;\n\n    @Input()\n    public localization: Localization;\n\n    @Input()\n    public hideFriendsList: boolean = false;\n\n    @Input()\n    public hideFriendsListOnUnsupportedViewport: boolean = true;\n\n    @Input()\n    public fileUploadUrl: string;\n\n    @Input()\n    public theme: Theme = Theme.Light;\n\n    @Input()\n    public customTheme: string;\n\n    @Input()\n    public messageDatePipeFormat: string = \"short\";\n\n    @Input()\n    public showMessageDate: boolean = true;\n    \n    @Input()\n    public isViewportOnMobileEnabled: boolean = false;\n     \n    @Output()\n    public onParticipantClicked: EventEmitter<IChatParticipant> = new EventEmitter<IChatParticipant>();\n\n    @Output()\n    public onParticipantChatOpened: EventEmitter<IChatParticipant> = new EventEmitter<IChatParticipant>();\n\n    @Output()\n    public onParticipantChatClosed: EventEmitter<IChatParticipant> = new EventEmitter<IChatParticipant>();\n    \n    @Output()\n    public onMessagesSeen: EventEmitter<Message[]> = new EventEmitter<Message[]>();\n\n    private browserNotificationsBootstrapped: boolean = false;\n\n    public hasPagedHistory: boolean = false;\n\n    // Don't want to add this as a setting to simplify usage. Previous placeholder and title settings available to be used, or use full Localization object.\n    private statusDescription: StatusDescription = {\n        online: 'Online',\n        busy: 'Busy',\n        away: 'Away',\n        offline: 'Offline'\n    };\n\n    private audioFile: HTMLAudioElement;\n\n    public searchInput: string = '';\n\n    protected participants: IChatParticipant[];\n\n    protected participantsResponse: ParticipantResponse[];\n\n    private participantsInteractedWith: IChatParticipant[] = [];\n\n    public currentActiveOption: IChatOption | null;\n\n    protected selectedUsersFromFriendsList: User[] = [];\n\n    public defaultWindowOptions(currentWindow: Window): IChatOption[]\n    {\n        if (this.groupAdapter && currentWindow.participant.participantType == ChatParticipantType.User)\n        {\n            return [{\n                isActive: false,\n                action: (chattingWindow: Window) => {\n                    \n                    this.selectedUsersFromFriendsList = this.selectedUsersFromFriendsList.concat(chattingWindow.participant as User);\n                },\n                validateContext: (participant: IChatParticipant) => {\n                    return participant.participantType == ChatParticipantType.User;\n                },\n                displayLabel: 'Add People' // TODO: Localize this\n            }];\n        }\n\n        return [];\n    }\n\n    private get localStorageKey(): string \n    {\n        return `ng-chat-users-${this.userId}`; // Appending the user id so the state is unique per user in a computer.   \n    }; \n\n    get filteredParticipants(): IChatParticipant[]\n    {\n        if (this.searchInput.length > 0){\n            // Searches in the friend list by the inputted search string\n            return this.participants.filter(x => x.displayName.toUpperCase().includes(this.searchInput.toUpperCase()));\n        }\n\n        return this.participants;\n    }\n\n    // Defines the size of each opened window to calculate how many windows can be opened on the viewport at the same time.\n    public windowSizeFactor: number = 320;\n\n    // Total width size of the friends list section\n    public friendsListWidth: number = 262;\n\n    // Available area to render the plugin\n    private viewPortTotalArea: number;\n    \n    // Set to true if there is no space to display at least one chat window and 'hideFriendsListOnUnsupportedViewport' is true\n    public unsupportedViewport: boolean = false;\n\n    // File upload state\n    public fileUploadersInUse: string[] = []; // Id bucket of uploaders in use\n    public fileUploadAdapter: IFileUploadAdapter;\n\n    windows: Window[] = [];\n\n    isBootstrapped: boolean = false;\n\n    @ViewChildren('chatMessages') chatMessageClusters: any;\n\n    @ViewChildren('chatWindowInput') chatWindowInputs: any;\n\n    @ViewChildren('nativeFileInput') nativeFileInputs: ElementRef[];\n\n    ngOnInit() { \n        this.bootstrapChat();\n    }\n\n    @HostListener('window:resize', ['$event'])\n    onResize(event: any){\n       this.viewPortTotalArea = event.target.innerWidth;\n\n       this.NormalizeWindows();\n    }\n\n    // Checks if there are more opened windows than the view port can display\n    private NormalizeWindows(): void\n    {\n        let maxSupportedOpenedWindows = Math.floor((this.viewPortTotalArea - (!this.hideFriendsList ? this.friendsListWidth : 0)) / this.windowSizeFactor);\n        let difference = this.windows.length - maxSupportedOpenedWindows;\n\n        if (difference >= 0){\n            this.windows.splice(this.windows.length - difference);\n        }\n\n        this.updateWindowsState(this.windows);\n\n        // Viewport should have space for at least one chat window but should show in mobile if option is enabled.\n        this.unsupportedViewport = this.isViewportOnMobileEnabled? false : this.hideFriendsListOnUnsupportedViewport && maxSupportedOpenedWindows < 1;\n    }\n\n    // Initializes the chat plugin and the messaging adapter\n    private bootstrapChat(): void\n    {\n        let initializationException = null;\n\n        if (this.adapter != null && this.userId != null)\n        {\n            try\n            {\n                this.viewPortTotalArea = window.innerWidth;\n\n                this.initializeTheme();\n                this.initializeDefaultText();\n                this.initializeBrowserNotifications();\n\n                // Binding event listeners\n                this.adapter.messageReceivedHandler = (participant, msg) => this.onMessageReceived(participant, msg);\n                this.adapter.friendsListChangedHandler = (participantsResponse) => this.onFriendsListChanged(participantsResponse);\n\n                // Loading current users list\n                if (this.pollFriendsList){\n                    // Setting a long poll interval to update the friends list\n                    this.fetchFriendsList(true);\n                    setInterval(() => this.fetchFriendsList(false), this.pollingInterval);\n                }\n                else\n                {\n                    // Since polling was disabled, a friends list update mechanism will have to be implemented in the ChatAdapter.\n                    this.fetchFriendsList(true);\n                }\n                \n                this.bufferAudioFile();\n\n                this.hasPagedHistory = this.adapter instanceof PagedHistoryChatAdapter;\n                \n                if (this.fileUploadUrl && this.fileUploadUrl !== \"\")\n                {\n                    this.fileUploadAdapter = new DefaultFileUploadAdapter(this.fileUploadUrl, this._httpClient);\n                }\n\n                this.isBootstrapped = true;\n            }\n            catch(ex)\n            {\n                initializationException = ex;\n            }\n        }\n\n        if (!this.isBootstrapped){\n            console.error(\"ng-chat component couldn't be bootstrapped.\");\n            \n            if (this.userId == null){\n                console.error(\"ng-chat can't be initialized without an user id. Please make sure you've provided an userId as a parameter of the ng-chat component.\");\n            }\n            if (this.adapter == null){\n                console.error(\"ng-chat can't be bootstrapped without a ChatAdapter. Please make sure you've provided a ChatAdapter implementation as a parameter of the ng-chat component.\");\n            }\n            if (initializationException)\n            {\n                console.error(`An exception has occurred while initializing ng-chat. Details: ${initializationException.message}`);\n                console.error(initializationException);\n            }\n        }\n    }\n\n    // Initializes browser notifications\n    private async initializeBrowserNotifications()\n    {\n        if (this.browserNotificationsEnabled && (\"Notification\" in window))\n        {\n            if (await Notification.requestPermission())\n            {\n                this.browserNotificationsBootstrapped = true;\n            }\n        }\n    }\n\n    // Initializes default text\n    private initializeDefaultText() : void\n    {\n        if (!this.localization)\n        {\n            this.localization = {\n                messagePlaceholder: this.messagePlaceholder,\n                searchPlaceholder: this.searchPlaceholder, \n                title: this.title,\n                statusDescription: this.statusDescription,\n                browserNotificationTitle: this.browserNotificationTitle,\n                loadMessageHistoryPlaceholder: \"Load older messages\"\n            };\n        }\n    }\n\n    private initializeTheme(): void\n    {\n        if (this.customTheme)\n        {\n            this.theme = Theme.Custom;\n        }\n        else if (this.theme != Theme.Light && this.theme != Theme.Dark)\n        {\n            // TODO: Use es2017 in future with Object.values(Theme).includes(this.theme) to do this check\n            throw new Error(`Invalid theme configuration for ng-chat. \"${this.theme}\" is not a valid theme value.`);\n        }\n    }\n\n    // Sends a request to load the friends list\n    private fetchFriendsList(isBootstrapping: boolean): void\n    {\n        this.adapter.listFriends()\n        .pipe(\n            map((participantsResponse: ParticipantResponse[]) => {\n                this.participantsResponse = participantsResponse;\n\n                this.participants = participantsResponse.map((response: ParticipantResponse) => {\n                    return response.participant;\n                });\n            })\n        ).subscribe(() => {\n            if (isBootstrapping)\n            {\n                this.restoreWindowsState();\n            }\n        });\n    }\n\n    fetchMessageHistory(window: Window) {\n        // Not ideal but will keep this until we decide if we are shipping pagination with the default adapter\n        if (this.adapter instanceof PagedHistoryChatAdapter)\n        {\n            window.isLoadingHistory = true;\n\n            this.adapter.getMessageHistoryByPage(window.participant.id, this.historyPageSize, ++window.historyPage)\n            .pipe(\n                map((result: Message[]) => {\n                    result.forEach((message) => this.assertMessageType(message));\n                    \n                    window.messages = result.concat(window.messages);\n                    window.isLoadingHistory = false;\n    \n                    const direction: ScrollDirection = (window.historyPage == 1) ? ScrollDirection.Bottom : ScrollDirection.Top;\n                    window.hasMoreMessages = result.length == this.historyPageSize;\n                    \n                    setTimeout(() => this.onFetchMessageHistoryLoaded(result, window, direction, true));\n                })\n            ).subscribe();\n        }\n        else\n        {\n            this.adapter.getMessageHistory(window.participant.id)\n            .pipe(\n                map((result: Message[]) => {\n                    result.forEach((message) => this.assertMessageType(message));\n    \n                    window.messages = result.concat(window.messages);\n                    window.isLoadingHistory = false;\n    \n                    setTimeout(() => this.onFetchMessageHistoryLoaded(result, window, ScrollDirection.Bottom));\n                })\n            ).subscribe();\n        }\n    }\n\n    private onFetchMessageHistoryLoaded(messages: Message[], window: Window, direction: ScrollDirection, forceMarkMessagesAsSeen: boolean = false): void \n    {\n        this.scrollChatWindow(window, direction)\n\n        if (window.hasFocus || forceMarkMessagesAsSeen)\n        {\n            const unseenMessages = messages.filter(m => !m.dateSeen);\n\n            this.markMessagesAsRead(unseenMessages);\n            this.onMessagesSeen.emit(unseenMessages);\n        }\n    }\n\n    // Updates the friends list via the event handler\n    private onFriendsListChanged(participantsResponse: ParticipantResponse[]): void\n    {\n        if (participantsResponse) \n        {\n            this.participantsResponse = participantsResponse;\n\n            this.participants = participantsResponse.map((response: ParticipantResponse) => {\n                return response.participant;\n            });\n\n            this.participantsInteractedWith = [];\n        }\n    }\n\n    // Handles received messages by the adapter\n    private onMessageReceived(participant: IChatParticipant, message: Message)\n    {\n        if (participant && message)\n        {\n            let chatWindow = this.openChatWindow(participant);\n\n            this.assertMessageType(message);\n\n            if (!chatWindow[1] || !this.historyEnabled){\n                chatWindow[0].messages.push(message);\n\n                this.scrollChatWindow(chatWindow[0], ScrollDirection.Bottom);\n\n                if (chatWindow[0].hasFocus)\n                {\n                    this.markMessagesAsRead([message]);\n                    this.onMessagesSeen.emit([message]);\n                }\n            }\n\n            this.emitMessageSound(chatWindow[0]);\n            \n            // Github issue #58 \n            // Do not push browser notifications with message content for privacy purposes if the 'maximizeWindowOnNewMessage' setting is off and this is a new chat window.\n            if (this.maximizeWindowOnNewMessage || (!chatWindow[1] && !chatWindow[0].isCollapsed))\n            { \n                // Some messages are not pushed because they are loaded by fetching the history hence why we supply the message here\n                this.emitBrowserNotification(chatWindow[0], message);\n            }\n        }\n    }\n\n    // Opens a new chat whindow. Takes care of available viewport\n    // Works for opening a chat window for an user or for a group\n    // Returns => [Window: Window object reference, boolean: Indicates if this window is a new chat window]\n    public openChatWindow(participant: IChatParticipant, focusOnNewWindow: boolean = false, invokedByUserClick: boolean = false): [Window, boolean]\n    {\n        // Is this window opened?\n        let openedWindow = this.windows.find(x => x.participant.id == participant.id);\n\n        if (!openedWindow)\n        {\n            if (invokedByUserClick) \n            {\n                this.onParticipantClicked.emit(participant);\n            }\n\n            // Refer to issue #58 on Github \n            let collapseWindow = invokedByUserClick ? false : !this.maximizeWindowOnNewMessage;\n\n            let newChatWindow: Window = new Window(participant, this.historyEnabled, collapseWindow);\n\n            // Loads the chat history via an RxJs Observable\n            if (this.historyEnabled)\n            {\n                this.fetchMessageHistory(newChatWindow);\n            }\n\n            this.windows.unshift(newChatWindow);\n\n            // Is there enough space left in the view port ? but should be displayed in mobile if option is enabled\n            if (!this.isViewportOnMobileEnabled) {\n                if (this.windows.length * this.windowSizeFactor >= this.viewPortTotalArea - (!this.hideFriendsList ? this.friendsListWidth : 0)) {\n                    this.windows.pop();\n                }\n            }\n\n            this.updateWindowsState(this.windows);\n            \n            if (focusOnNewWindow && !collapseWindow) \n            {\n                this.focusOnWindow(newChatWindow);\n            }\n\n            this.participantsInteractedWith.push(participant);\n            this.onParticipantChatOpened.emit(participant);\n\n            return [newChatWindow, true];\n        }\n        else\n        {\n            // Returns the existing chat window     \n            return [openedWindow, false];       \n        }\n    }\n\n    // Focus on the input element of the supplied window\n    private focusOnWindow(window: Window, callback: Function = () => {}) : void\n    {\n        let windowIndex = this.windows.indexOf(window);\n        if (windowIndex >= 0)\n        {\n            setTimeout(() => {\n                if (this.chatWindowInputs)\n                {\n                    let messageInputToFocus = this.chatWindowInputs.toArray()[windowIndex];\n                \n                    messageInputToFocus.nativeElement.focus(); \n                }\n\n                callback(); \n            });\n        } \n    }\n\n    // Scrolls a chat window message flow to the bottom\n    private scrollChatWindow(window: Window, direction: ScrollDirection): void\n    {\n        if (!window.isCollapsed){\n            let windowIndex = this.windows.indexOf(window);\n            setTimeout(() => {\n                if (this.chatMessageClusters){\n                    let targetWindow = this.chatMessageClusters.toArray()[windowIndex];\n\n                    if (targetWindow)\n                    {\n                        let element = this.chatMessageClusters.toArray()[windowIndex].nativeElement;\n                        let position = ( direction === ScrollDirection.Top ) ? 0 : element.scrollHeight;\n                        element.scrollTop = position;\n                    }\n                }\n            }); \n        }\n    }\n\n    // Marks all messages provided as read with the current time.\n    public markMessagesAsRead(messages: Message[]): void\n    {\n        let currentDate = new Date();\n\n        messages.forEach((msg)=>{\n            msg.dateSeen = currentDate;\n        });\n    }\n\n    // Buffers audio file (For component's bootstrapping)\n    private bufferAudioFile(): void {\n        if (this.audioSource && this.audioSource.length > 0)\n        {\n            this.audioFile = new Audio();\n            this.audioFile.src = this.audioSource;\n            this.audioFile.load();\n        }\n    }\n\n    // Emits a message notification audio if enabled after every message received\n    private emitMessageSound(window: Window): void\n    {\n        if (this.audioEnabled && !window.hasFocus && this.audioFile) {\n            this.audioFile.play();\n        }\n    }\n\n    // Emits a browser notification\n    private emitBrowserNotification(window: Window, message: Message): void\n    {       \n        if (this.browserNotificationsBootstrapped && !window.hasFocus && message) {\n            let notification = new Notification(`${this.localization.browserNotificationTitle} ${window.participant.displayName}`, {\n                'body': message.message,\n                'icon': this.browserNotificationIconSource\n            });\n\n            setTimeout(() => {\n                notification.close();\n            }, message.message.length <= 50 ? 5000 : 7000); // More time to read longer messages\n        }\n    }\n\n    // Saves current windows state into local storage if persistence is enabled\n    private updateWindowsState(windows: Window[]): void\n    {\n        if (this.persistWindowsState)\n        {\n            let participantIds = windows.map((w) => {\n                return w.participant.id;\n            });\n\n            localStorage.setItem(this.localStorageKey, JSON.stringify(participantIds));\n        }\n    }\n\n    private restoreWindowsState(): void\n    {\n        try\n        {\n            if (this.persistWindowsState)\n            {\n                let stringfiedParticipantIds = localStorage.getItem(this.localStorageKey);\n\n                if (stringfiedParticipantIds && stringfiedParticipantIds.length > 0)\n                {\n                    let participantIds = <number[]>JSON.parse(stringfiedParticipantIds);\n\n                    let participantsToRestore = this.participants.filter(u => participantIds.indexOf(u.id) >= 0);\n\n                    participantsToRestore.forEach((participant) => {\n                        this.openChatWindow(participant);\n                    });\n                }\n            }\n        }\n        catch (ex)\n        {\n            console.error(`An error occurred while restoring ng-chat windows state. Details: ${ex}`);\n        }\n    }\n\n    // Gets closest open window if any. Most recent opened has priority (Right)\n    private getClosestWindow(window: Window): Window | undefined\n    {   \n        let index = this.windows.indexOf(window);\n\n        if (index > 0)\n        {\n            return this.windows[index - 1];\n        }\n        else if (index == 0 && this.windows.length > 1)\n        {   \n            return this.windows[index + 1];\n        }\n    }\n\n    private assertMessageType(message: Message): void {\n        // Always fallback to \"Text\" messages to avoid rendenring issues\n        if (!message.type)\n        {\n            message.type = MessageType.Text;\n        }\n    }\n\n    private formatUnreadMessagesTotal(totalUnreadMessages: number): string\n    {\n        if (totalUnreadMessages > 0){\n\n            if (totalUnreadMessages > 99) \n                return  \"99+\";\n            else\n                return String(totalUnreadMessages); \n        }\n\n        // Empty fallback.\n        return \"\";\n    }\n\n    // Returns the total unread messages from a chat window. TODO: Could use some Angular pipes in the future \n    unreadMessagesTotal(window: Window): string\n    {\n        let totalUnreadMessages = 0;\n\n        if (window){\n            totalUnreadMessages = window.messages.filter(x => x.fromId != this.userId && !x.dateSeen).length;\n        }\n            \n        return this.formatUnreadMessagesTotal(totalUnreadMessages);\n    }\n\n    unreadMessagesTotalByParticipant(participant: IChatParticipant): string\n    {\n        let openedWindow = this.windows.find(x => x.participant.id == participant.id);\n\n        if (openedWindow){\n            return this.unreadMessagesTotal(openedWindow);\n        }\n        else\n        {\n            let totalUnreadMessages = this.participantsResponse\n                .filter(x => x.participant.id == participant.id && !this.participantsInteractedWith.find(u => u.id == participant.id) && x.metadata && x.metadata.totalUnreadMessages > 0)\n                .map((participantResponse) => {\n                    return participantResponse.metadata.totalUnreadMessages\n                })[0];\n\n            return this.formatUnreadMessagesTotal(totalUnreadMessages);\n        }\n    }\n\n    /*  Monitors pressed keys on a chat window\n        - Dispatches a message when the ENTER key is pressed\n        - Tabs between windows on TAB or SHIFT + TAB\n        - Closes the current focused window on ESC\n    */\n    onChatInputTyped(event: any, window: Window): void\n    {\n        switch (event.keyCode)\n        {\n            case 13:\n                if (window.newMessage && window.newMessage.trim() != \"\")\n                {\n                    let message = new Message();\n             \n                    message.fromId = this.userId;\n                    message.toId = window.participant.id;\n                    message.message = window.newMessage;\n                    message.dateSent = new Date();\n        \n                    window.messages.push(message);\n        \n                    this.adapter.sendMessage(message);\n        \n                    window.newMessage = \"\"; // Resets the new message input\n        \n                    this.scrollChatWindow(window, ScrollDirection.Bottom);\n                }\n                break;\n            case 9:\n                event.preventDefault();\n                \n                let currentWindowIndex = this.windows.indexOf(window);\n                let messageInputToFocus = this.chatWindowInputs.toArray()[currentWindowIndex + (event.shiftKey ? 1 : -1)]; // Goes back on shift + tab\n\n                if (!messageInputToFocus)\n                {\n                    // Edge windows, go to start or end\n                    messageInputToFocus = this.chatWindowInputs.toArray()[currentWindowIndex > 0 ? 0 : this.chatWindowInputs.length - 1]; \n                }\n\n                messageInputToFocus.nativeElement.focus();\n\n                break;\n            case 27:\n                let closestWindow = this.getClosestWindow(window);\n\n                if (closestWindow)\n                {\n                    this.focusOnWindow(closestWindow, () => { this.onCloseChatWindow(window); });\n                }\n                else\n                {\n                    this.onCloseChatWindow(window);\n                }\n        }\n    }\n\n    // Closes a chat window via the close 'X' button\n    onCloseChatWindow(window: Window): void \n    {\n        let index = this.windows.indexOf(window);\n\n        this.windows.splice(index, 1);\n\n        this.updateWindowsState(this.windows);\n\n        this.onParticipantChatClosed.emit(window.participant);\n    }\n\n    // Toggle friends list visibility\n    onChatTitleClicked(event: any): void\n    {\n        this.isCollapsed = !this.isCollapsed;\n    }\n\n    // Toggles a chat window visibility between maximized/minimized\n    onChatWindowClicked(window: Window): void\n    {\n        window.isCollapsed = !window.isCollapsed;\n        this.scrollChatWindow(window, ScrollDirection.Bottom);\n    }\n\n    // Asserts if a user avatar is visible in a chat cluster\n    isAvatarVisible(window: Window, message: Message, index: number): boolean\n    {\n        if (message.fromId != this.userId){\n            if (index == 0){\n                return true; // First message, good to show the thumbnail\n            }\n            else{\n                // Check if the previous message belongs to the same user, if it belongs there is no need to show the avatar again to form the message cluster\n                if (window.messages[index - 1].fromId != message.fromId){\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    getChatWindowAvatar(participant: IChatParticipant, message: Message): string | null\n    {\n        if (participant.participantType == ChatParticipantType.User)\n        {\n            return participant.avatar;\n        }\n        else if (participant.participantType == ChatParticipantType.Group)\n        {\n            let group = participant as Group;\n            let userIndex = group.chattingTo.findIndex(x => x.id == message.fromId);\n\n            return group.chattingTo[userIndex >= 0 ? userIndex : 0].avatar;\n        }\n\n        return null;\n    }\n\n    // Toggles a window focus on the focus/blur of a 'newMessage' input\n    toggleWindowFocus(window: Window): void\n    {\n        window.hasFocus = !window.hasFocus;\n        if(window.hasFocus) {\n            const unreadMessages = window.messages\n                .filter(message => message.dateSeen == null \n                    && (message.toId == this.userId || window.participant.participantType === ChatParticipantType.Group));\n            \n            if (unreadMessages && unreadMessages.length > 0)\n            {\n                this.markMessagesAsRead(unreadMessages);\n                this.onMessagesSeen.emit(unreadMessages);\n            }\n        }\n    }\n\n    // [Localized] Returns the status descriptive title\n    getStatusTitle(status: ChatParticipantStatus) : any\n    {\n        let currentStatus = status.toString().toLowerCase();\n\n        return this.localization.statusDescription[currentStatus];\n    }\n\n    triggerOpenChatWindow(user: User): void {\n        if (user)\n        {\n            this.openChatWindow(user);\n        }\n    }\n\n    triggerCloseChatWindow(userId: any): void {\n        let openedWindow = this.windows.find(x => x.participant.id == userId);\n\n        if (openedWindow){\n            this.onCloseChatWindow(openedWindow);\n        }\n    }\n\n    triggerToggleChatWindowVisibility(userId: any): void {\n        let openedWindow = this.windows.find(x => x.participant.id == userId);\n\n        if (openedWindow){\n            this.onChatWindowClicked(openedWindow);\n        }\n    }\n\n    // Generates a unique file uploader id for each participant\n    getUniqueFileUploadInstanceId(window: Window): string\n    {\n        if (window && window.participant)\n        {\n            return `ng-chat-file-upload-${window.participant.id}`;\n        }\n        \n        return 'ng-chat-file-upload';\n    }\n\n    // Triggers native file upload for file selection from the user\n    triggerNativeFileUpload(window: Window): void\n    {\n        if (window)\n        {\n            const fileUploadInstanceId = this.getUniqueFileUploadInstanceId(window);\n            const uploadElementRef = this.nativeFileInputs.filter(x => x.nativeElement.id === fileUploadInstanceId)[0];\n\n            if (uploadElementRef)\n            uploadElementRef.nativeElement.click();\n        }\n    }\n\n    private clearInUseFileUploader(fileUploadInstanceId: string): void\n    {\n        const uploaderInstanceIdIndex = this.fileUploadersInUse.indexOf(fileUploadInstanceId);\n\n        if (uploaderInstanceIdIndex > -1) {\n            this.fileUploadersInUse.splice(uploaderInstanceIdIndex, 1);\n        }\n    }\n\n    isUploadingFile(window: Window): boolean\n    {\n        const fileUploadInstanceId = this.getUniqueFileUploadInstanceId(window);\n\n        return this.fileUploadersInUse.indexOf(fileUploadInstanceId) > -1;\n    }\n\n    // Handles file selection and uploads the selected file using the file upload adapter\n    onFileChosen(window: Window): void {\n        const fileUploadInstanceId = this.getUniqueFileUploadInstanceId(window);\n        const uploadElementRef = this.nativeFileInputs.filter(x => x.nativeElement.id === fileUploadInstanceId)[0];\n\n        if (uploadElementRef)\n        {\n            const file: File = uploadElementRef.nativeElement.files[0];\n\n            this.fileUploadersInUse.push(fileUploadInstanceId);\n\n            this.fileUploadAdapter.uploadFile(file, window.participant.id)\n                .subscribe(fileMessage => {\n                    this.clearInUseFileUploader(fileUploadInstanceId);\n\n                    fileMessage.fromId = this.userId;\n\n                    // Push file message to current user window   \n                    window.messages.push(fileMessage);\n        \n                    this.adapter.sendMessage(fileMessage);\n        \n                    this.scrollChatWindow(window, ScrollDirection.Bottom);\n\n                    // Resets the file upload element\n                    uploadElementRef.nativeElement.value = '';\n                }, (error) => {\n                    this.clearInUseFileUploader(fileUploadInstanceId);\n\n                    // Resets the file upload element\n                    uploadElementRef.nativeElement.value = '';\n\n                    // TODO: Invoke a file upload adapter error here\n                });\n        }\n    }\n    \n    onFriendsListCheckboxChange(selectedUser: User, isChecked: boolean): void\n    {\n        if(isChecked) {\n            this.selectedUsersFromFriendsList.push(selectedUser);\n        } \n        else \n        {\n            this.selectedUsersFromFriendsList.splice(this.selectedUsersFromFriendsList.indexOf(selectedUser), 1);\n        }\n    }\n\n    onFriendsListActionCancelClicked(): void\n    {\n        if (this.currentActiveOption)\n        {\n            this.currentActiveOption.isActive = false;\n            this.currentActiveOption = null;\n            this.selectedUsersFromFriendsList = [];\n        }\n    }\n\n    onFriendsListActionConfirmClicked() : void\n    {\n        let newGroup = new Group(this.selectedUsersFromFriendsList);\n\n        this.openChatWindow(newGroup);\n\n        if (this.groupAdapter)\n        {\n            this.groupAdapter.groupCreated(newGroup);\n        }\n\n        // Canceling current state\n        this.onFriendsListActionCancelClicked();\n    }\n\n    isUserSelectedFromFriendsList(user: User) : boolean\n    {\n        return (this.selectedUsersFromFriendsList.filter(item => item.id == user.id)).length > 0\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\nlet emojiDictionary = [\n    { patterns: [':)', ':-)', '=)'], unicode: 'ð' },\n    { patterns: [':D', ':-D', '=D'], unicode: 'ð' },\n    { patterns: [':(', ':-(', '=('], unicode: 'ð' },\n    { patterns: [':|', ':-|', '=|'], unicode: 'ð' },\n    { patterns: [':*', ':-*', '=*'], unicode: 'ð' },\n    { patterns: ['T_T', 'T.T'], unicode: 'ð­' },\n    { patterns: [':O', ':-O', '=O', ':o', ':-o', '=o'], unicode: 'ð®' },\n    { patterns: [':P', ':-P', '=P', ':p', ':-p', '=p'], unicode: 'ð' },\n    { patterns: ['>.<'], unicode: 'ð£' },\n    { patterns: ['@.@'], unicode: 'ðµ' },\n    { patterns: ['*.*'], unicode: 'ð' },\n    { patterns: ['<3'], unicode: 'â¤ï¸' },\n    { patterns: ['^.^'], unicode: 'ð' },\n    { patterns: [':+1'], unicode: 'ð' },\n    { patterns: [':-1'], unicode: 'ð' }\n];\n\n/*\n * Transforms common emoji text to UTF encoded emojis\n*/\n@Pipe({name: 'emojify'})\nexport class EmojifyPipe implements PipeTransform {\n    transform(message: string, pipeEnabled: boolean): string {\n        if (pipeEnabled && message && message.length > 1) {  \n            emojiDictionary.forEach(emoji => {\n                emoji.patterns.forEach(pattern => {\n                    message = message.replace(pattern, emoji.unicode);\n                })\n            });\n        }\n\n    return message;\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n/*\n * Transforms text containing URLs or E-mails to valid links/mailtos\n*/\n@Pipe({name: 'linkfy'})\nexport class LinkfyPipe implements PipeTransform {\n    transform(message: string, pipeEnabled: boolean): string {\n        if (pipeEnabled && message && message.length > 1)\n        {\n            let replacedText;\n            let replacePatternProtocol;\n            let replacePatternWWW;\n            let replacePatternMailTo;\n\n            // URLs starting with http://, https://, or ftp://\n            replacePatternProtocol = /(\\b(https?|ftp):\\/\\/[-A-Z0-9+&@#\\/%?=~_|!:,.;]*[-A-Z0-9+&@#\\/%=~_|])/gim;\n            replacedText = message.replace(replacePatternProtocol, '<a href=\"$1\" target=\"_blank\">$1</a>');\n\n            // URLs starting with \"www.\" (ignoring // before it).\n            replacePatternWWW = /(^|[^\\/])(www\\.[\\S]+(\\b|$))/gim;\n            replacedText = replacedText.replace(replacePatternWWW, '$1<a href=\"http://$2\" target=\"_blank\">$2</a>');\n\n            // Change email addresses to mailto:: links.\n            replacePatternMailTo = /(([a-zA-Z0-9\\-\\_\\.])+@[a-zA-Z\\_]+?(\\.[a-zA-Z]{2,6})+)/gim;\n            replacedText = replacedText.replace(replacePatternMailTo, '<a href=\"mailto:$1\">$1</a>');\n\n            return replacedText;\n        }\n        else\n            return message;\n    } \n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { Group } from \"../core/group\";\nimport { ChatParticipantType } from \"../core/chat-participant-type.enum\";\nimport { IChatParticipant } from \"../core/chat-participant\";\nimport { Message } from \"../core/message\";\n\n/*\n * Renders the display name of a participant in a group based on who's sent the message\n*/\n@Pipe({name: 'groupMessageDisplayName'})\nexport class GroupMessageDisplayNamePipe implements PipeTransform {\n    transform(participant: IChatParticipant, message: Message): string {\n        if (participant && participant.participantType == ChatParticipantType.Group)\n        {\n            let group = participant as Group;\n            let userIndex = group.chattingTo.findIndex(x => x.id == message.fromId);\n\n            return group.chattingTo[userIndex >= 0 ? userIndex : 0].displayName;\n        }\n        else\n            return \"\";\n    } \n}\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { Window } from '../../core/window';\nimport { IChatOption } from '../../core/chat-option';\n\n@Component({\n    selector: 'ng-chat-options',\n    templateUrl: './ng-chat-options.component.html',\n    styleUrls: ['./ng-chat-options.component.css']\n})\nexport class NgChatOptionsComponent implements OnInit {\n\n  constructor() { }\n\n  @Input()\n  public options: IChatOption[];\n\n  @Input()\n  public activeOptionTracker: IChatOption;\n\n  @Output()\n  public activeOptionTrackerChange: EventEmitter<IChatOption> = new EventEmitter<IChatOption>();\n\n  @Input()\n  public chattingTo: Window;\n\n  ngOnInit() {\n  }\n\n  onOptionClicked(option: IChatOption): void\n  {\n      if (option.action)\n      {\n          option.isActive = true;\n          option.action(this.chattingTo);\n          this.activeOptionTrackerChange.emit(option);\n      }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { NgChat } from './ng-chat.component';\nimport { EmojifyPipe } from './pipes/emojify.pipe';\nimport { LinkfyPipe } from './pipes/linkfy.pipe';\nimport { GroupMessageDisplayNamePipe } from './pipes/group-message-display-name.pipe';\nimport { NgChatOptionsComponent } from './components/ng-chat-options/ng-chat-options.component';\n\n@NgModule({\n  imports: [CommonModule, FormsModule, HttpClientModule],\n  declarations: [NgChat, EmojifyPipe, LinkfyPipe, GroupMessageDisplayNamePipe, NgChatOptionsComponent],\n  exports: [NgChat]\n})\nexport class NgChatModule {\n}\n"],"names":[],"mappings":"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"}
